class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> ans= new ArrayList<>();
        if(n==1){
            ans.add(0);
            return ans;
        }
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        int indegree[]= new int[n];
        for(int i=0;i<n;i++) adj.add(new ArrayList<>());
        for(int i=0;i<edges.length;i++){
          indegree[edges[i][0]]++;
          indegree[edges[i][1]]++;
          adj.get(edges[i][0]).add(edges[i][1]);
          adj.get(edges[i][1]).add(edges[i][0]);
        }
        Queue<Integer> q= new ArrayDeque<>();
        for(int i=0;i<n;i++){
            if(indegree[i]==1) q.add(i);
        } 
        int processed=0;
        while(n-processed>2){
           int size=q.size();
           processed+=size;
           for(int i=0;i<size;i++){
            int curr=q.poll();
            for(int v:adj.get(curr)){
                if(--indegree[v]==1) q.add(v);
            }
           } 
        }
        while(!q.isEmpty()) ans.add(q.poll());
        return ans;
    }
}
