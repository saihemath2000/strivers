//Recursion
public static boolean wildcardMatching(String pattern, String text) {
		// Write your code here.
		return f(pattern,text,pattern.length()-1,text.length()-1);
}
public static boolean f(String pattern, String text,int i,int j){
		if(i<0 && j<0)
		  return true;
		if(i<0 && j>=0)
		  return false;
		if(j<0 && i>=0){
			for(int ind=0;ind<=i;ind++){
				if(pattern.charAt(ind)!='*')
				  return false;
			}
			return true;
		}
		if(pattern.charAt(i)==text.charAt(j) || pattern.charAt(i)=='?')
		  return f(pattern,text,i-1,j-1);
		if(pattern.charAt(i)=='*'){
			return f(pattern,text,i-1,j)|| f(pattern,text,i,j-1);
		}  
		return false;      
}

//Memoization
public static boolean wildcardMatching(String pattern, String text) {
		// Write your code here.
		int n=pattern.length();
		int m=text.length();
		int dp[][]= new int[n][m];
		for(int row[]:dp)
		  Arrays.fill(row,-1);
		return f(pattern,text,n-1,m-1,dp)==1;
}
public static int f(String pattern, String text,int i,int j,int dp[][]){
		if(i<0 && j<0)
		  return 1;
		if(i<0 && j>=0)
		  return 0;
		if(j<0 && i>=0){
			for(int ind=0;ind<=i;ind++){
				if(pattern.charAt(ind)!='*')
				  return 0;
			}
			return 1;
		}
		if(dp[i][j]!=-1)
		  return dp[i][j]; 
		if(pattern.charAt(i)==text.charAt(j) || pattern.charAt(i)=='?')
		  return dp[i][j]=f(pattern,text,i-1,j-1,dp);
		if(pattern.charAt(i)=='*'){
			return dp[i][j]=(f(pattern,text,i-1,j,dp)==1||f(pattern,text,i,j-1,dp)==1)?1:0;
		}  
		return dp[i][j]=0;      
}

//Tabulation
public static boolean allstars(int i,String pattern){
		for(int ind=1;ind<=i;ind++){
		  if(pattern.charAt(ind-1)!='*')
		    return false;
		}
		return true;

}
public static boolean wildcardMatching(String pattern, String text) {
		// Write your code here.
		int n=pattern.length();
		int m=text.length();
		boolean dp[][]= new boolean[n+1][m+1];
		dp[0][0]=true;
		for(int i=1;i<=n;i++){
			dp[i][0]=allstars(i,pattern);
		}
		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				if(pattern.charAt(i-1)==text.charAt(j-1) || pattern.charAt(i-1)=='?')
				  dp[i][j]= dp[i-1][j-1];
				else if(pattern.charAt(i-1)=='*')
				  dp[i][j]= dp[i-1][j]||dp[i][j-1];  
			}
		}
		return dp[n][m];
}
