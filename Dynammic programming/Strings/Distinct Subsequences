//Memoization
static int prime = (int) (Math.pow(10, 9) + 7);
public static int distinctSubsequences(String str, String sub) {
        // Write your code here.
        int n=str.length(),m=sub.length();
        int dp[][] = new int[n][m];
        for(int rows[] : dp)
            Arrays.fill(rows,-1);
        return f(str,sub,n-1,m-1,dp);
}

static int f(String s1, String s2, int i,int j,int[][] dp){
        if(j<0)
            return 1;
        if(i<0)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(s1.charAt(i)==s2.charAt(j)){
            int leaveOne = f(s1,s2,i-1,j-1,dp);
            int stay = f(s1,s2,i-1,j,dp);
            return dp[i][j]=(leaveOne + stay)%prime;
        }else{
            return dp[i][j]= f(s1,s2,i-1,j,dp);
        }
}

//Tabulation
static int prime = (int) (Math.pow(10, 9) + 7);
    public static int distinctSubsequences(String str, String sub) {
        // Write your code here.
        int n=str.length(),m=sub.length();
        int dp[][] = new int[n+1][m+1];
        for(int i=0;i<=n;i++)
          dp[i][0]=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
               if(str.charAt(i-1)==sub.charAt(j-1)){
                   int leaveOne= dp[i-1][j-1];
                   int stay= dp[i-1][j];
                   dp[i][j]= (leaveOne+stay)%prime;
               }
               else{
                   dp[i][j]= dp[i-1][j]%prime;
               }    
            }
        }
        return dp[n][m];
}

//Optimized tabulation
static int prime = (int) (Math.pow(10, 9) + 7);
    public static int distinctSubsequences(String str, String sub) {
        // Write your code here.
        int n=str.length(),m=sub.length();
        int prev[]= new int[m+1];
        prev[0]=1;
        for(int i=1;i<=n;i++){
            for(int j=m;j>=1;j--){
               if(str.charAt(i-1)==sub.charAt(j-1)){
                   int leaveOne= prev[j-1];
                   int stay= prev[j];
                   prev[j]= (leaveOne+stay)%prime;
               }    
            }
        }
        return prev[m];
}

/
