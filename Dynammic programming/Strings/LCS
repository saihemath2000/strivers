//Recursion
public static int lcs(String s, String t) {
		return f(s,t,s.length()-1,t.length()-1);
}
public static int f(String s, String t,int m,int n){
		if(m<0 || n<0){
			return 0;  
		}
		if(s.charAt(m)==t.charAt(n))
		   return 1+f(s,t,m-1,n-1); 
		else{
			return Math.max(f(s,t,m-1,n),f(s,t,m,n-1));
		}   
}

//Memoization
public static int lcs(String s, String t) {
		//Your code goes here
		int m= s.length();
		int n= t.length();
		int dp[][]= new int[m][n];
		for(int row[]:dp)
		  Arrays.fill(row,-1);
		return f(s,t,m-1,n-1,dp);
}
public static int f(String s, String t,int m,int n,int dp[][]){
		if(m<0|| n<0){
			return 0;  
		}
		if(dp[m][n]!=-1)
		  return dp[m][n];
		if(s.charAt(m)==t.charAt(n))
		   return dp[m][n]=1+f(s,t,m-1,n-1,dp); 
		else{
			return dp[m][n]=Math.max(f(s,t,m-1,n,dp),f(s,t,m,n-1,dp));
		}   
}

//Tabulation
public static int lcs(String s, String t) {
		//Your code goes here
		int m= s.length();
		int n= t.length();
		int dp[][]= new int[m+1][n+1];
		for(int i=1;i<=m;i++){
			for(int j=1;j<=n;j++){
				if(s.charAt(i-1)==t.charAt(j-1))
				  dp[i][j]= 1+dp[i-1][j-1];
				else{
				  dp[i][j]=  Math.max(dp[i-1][j],dp[i][j-1]);
				}  
			}
		}
		return dp[m][n];
}

//Optimized tabulation
public static int lcs(String s, String t) {
		//Your code goes here
		int m= s.length();
		int n= t.length();
		int prev[]= new int[n+1];
		int curr[]= new int[n+1];
		for(int i=1;i<=m;i++){
			for(int j=1;j<=n;j++){
				if(s.charAt(i-1)==t.charAt(j-1))
				  curr[j]= 1+prev[j-1];
				else{
				  curr[j]=  Math.max(prev[j],curr[j-1]);
				}  
			}
			prev = (curr.clone());
		}
		return prev[n];
}
