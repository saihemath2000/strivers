//Recursion
public int minDistance(String word1, String word2) {
        return f(word1,word2,word1.length()-1,word2.length()-1);
}
public static int f(String word1,String word2,int i,int j){
        if(i<0)
         return j+1;
        if(j<0)
         return i+1;
        if(word1.charAt(i)==word2.charAt(j))
          return f(word1,word2,i-1,j-1); 
        int replace= 1+f(word1,word2,i-1,j-1);
        int insert = 1+f(word1,word2,i,j-1);
        int delete = 1+f(word1,word2,i-1,j);
        return Math.min(replace,Math.min(insert,delete));   
}

//Memoization
public int minDistance(String word1, String word2) {
        int n= word1.length(),m=word2.length();
        int dp[][]= new int[n][m];
        for(int array[]:dp)
          Arrays.fill(array,-1);
        return f(word1,word2,n-1,m-1,dp);
}
public static int f(String word1,String word2,int i,int j,int dp[][]){
        if(i<0)
         return j+1;
        if(j<0)
         return i+1;
        if(word1.charAt(i)==word2.charAt(j))
          return dp[i][j]=f(word1,word2,i-1,j-1,dp);
        if(dp[i][j]!=-1)
          return dp[i][j];   
        int replace= 1+f(word1,word2,i-1,j-1,dp);
        int insert = 1+f(word1,word2,i,j-1,dp);
        int delete = 1+f(word1,word2,i-1,j,dp);
        return dp[i][j]=Math.min(replace,Math.min(insert,delete));   
}

//Tabulation
public int minDistance(String word1, String word2) {
        int n= word1.length(),m=word2.length();
        int dp[][]= new int[n+1][m+1];
        for(int j=0;j<=m;j++)
           dp[0][j]=j;
        for(int i=0;i<=n;i++)
           dp[i][0]=i;   
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1))
                   dp[i][j]= dp[i-1][j-1];
                else{   
                    int replace= 1+dp[i-1][j-1];
                    int insert = 1+dp[i][j-1];
                    int delete = 1+dp[i-1][j];
                    dp[i][j]= Math.min(replace,Math.min(insert,delete));
                }   
            }
        }
        return dp[n][m];
}
