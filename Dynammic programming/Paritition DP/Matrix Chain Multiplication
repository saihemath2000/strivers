//Memoization

public static int mcm(int[] p){
	  int n= p.length;	
	  int dp[][]= new int[n][n];
	  for(int row[]:dp)
	    Arrays.fill(row,-1);	
      return f(p,1,n-1,dp);
}
public static int f(int p[],int i,int j,int dp[][]){
		if(i==j)
		  return 0;
		if(dp[i][j]!=-1)
		  return dp[i][j];  
		int min= Integer.MAX_VALUE;  
		for(int k=i;k<=j-1;k++){
			int ans= f(p,i,k,dp)+f(p,k+1,j,dp)+p[i-1]*p[k]*p[j];
			min= Math.min(ans,min);
		}
		return dp[i][j]=min;  
}

//Tabulation
public static int mcm(int[] p){
	  int n= p.length;	
	  int dp[][]= new int[n][n];
	    for(int i=0;i<n;i++)
	        dp[i][i]=0;
	    for(int i=n-1;i>=1;i--){
		    for(int j=i+1;j<n;j++){
			  int min=Integer.MAX_VALUE;
			    for(int k=i;k<j;k++){
				  int ans= dp[i][k]+dp[k+1][j]+p[i-1]*p[k]*p[j];
				  min=Math.min(min,ans);
				  dp[i][j]=min;
			    }
		    }
	    }
		return dp[1][n-1];
}
