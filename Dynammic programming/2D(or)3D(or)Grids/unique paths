//memoization
public static int uniquePaths(int m, int n) {
		// Write your code here.
		int dp[][]= new int[m][n];
		for(int[] row:dp)
		   Arrays.fill(row,-1);
		return check(m-1,n-1,dp);
}
public static int check(int i,int j,int dp[][]){
       if(i==0 && j==0) return 1;
	   if(i<0 || j<0) 
	       return 0;
	   if(dp[i][j]!=-1) return dp[i][j];
       return dp[i][j]= check(i,j-1,dp)+check(i-1,j,dp); 	   
}

//tabulation
public static int uniquePaths(int m, int n) {
		// Write your code here.
		int dp[][]= new int[m][n];
		for(int[] row:dp)
		   Arrays.fill(row,-1);
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				if(i==0 && j==0){
					dp[i][j]=1;
					continue;
				}
				int up = i>0?dp[i-1][j]:0;
				int left = j>0?dp[i][j-1]:0;
				dp[i][j]=up+left;
			}
		}   
		return dp[m-1][n-1];
}

//optimized tabulation
public static int uniquePaths(int m, int n) {
		// Write your code here.
		int prev[]= new int[n];
		Arrays.fill(prev,-1);
		for(int i=0;i<m;i++){
			int curr[]=new int[n];
			for(int j=0;j<n;j++){
				if(i==0 && j==0){
					curr[j]=1;
					continue;
				}
				int up = i>0?prev[j]:0;
				int left = j>0?curr[j-1]:0;
				curr[j]=up+left;
			}
			prev=curr;
		}   
		return prev[n-1];
}
