//recursion
public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        return f(n-1,3,points);
}
public static int f(int n,int last,int points[][]){
        if(n==0){
            int max=0;
            for(int i=0;i<3;i++){
                if(i!=last)
                  max= Math.max(max,points[0][i]);
            }
            return max;
        }
        int max=0;
        for(int i=0;i<3;i++){
            if(i!=last){
               int point = points[n][i]+f(n-1,i,points);
               max=Math.max(max,point);  
            }
        }
        return max;
}

//Memoization
public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        int dp[][]= new int[n][4];
        for(int[] row : dp) 
            Arrays.fill(row,-1); 
        return f(n-1,3,points,dp);
}
public static int f(int n,int last,int points[][],int dp[][]){
        if(n==0){
            int max=0;
            for(int i=0;i<3;i++){
                if(i!=last)
                  max= Math.max(max,points[0][i]);
            }
            return max;
        }
        if(dp[n][last]!=-1)
           return dp[n][last];
        int max=0;
        for(int i=0;i<3;i++){
            if(i!=last){
               int point = points[n][i]+f(n-1,i,points,dp);
               max=Math.max(max,point);  
            }
        }
        return dp[n][last]=max;
}

//tabulation
public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        int dp[][]= new int[n][4];
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));
        for (int day = 1; day < n; day++) {
            for (int last = 0; last < 4; last++) {
                dp[day][last] = 0; // Initialize the maximum points for the current day and last activity
                // Consider each possible task for the current day
                for (int task = 0; task <= 2; task++) {
                    if (task != last) { // Ensure that the current task is different from the last
                        // Calculate the points for the current activity and add it to the maximum points from the previous day
                        int activity = points[day][task] + dp[day - 1][task];
                        // Update the maximum points for the current day and last activity
                        dp[day][last] = Math.max(dp[day][last], activity);
                    }
                }
            }
        }
        return dp[n-1][3];
}

//optimized tabulation
public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        int prev[] = new int[4];

        // Initialize the first day's maximum points based on the available choices
        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        // Iterate through each day starting from the second day
        for (int day = 1; day < n; day++) {
            // Initialize an array 'temp' to store the maximum points for the current day
            int temp[] = new int[4];
            for (int last = 0; last < 4; last++) {
                temp[last] = 0; // Initialize the maximum points for the current day and last activity
                // Consider each possible task for the current day
                for (int task = 0; task <= 2; task++) {
                    if (task != last) { // Ensure that the current task is different from the last
                        // Calculate the points for the current activity and add it to the maximum points from the previous day
                        temp[last] = Math.max(temp[last], points[day][task] + prev[task]);
                    }
                }
            }
            // Update 'prev' to store the maximum points for the current day
            prev = temp;
        }

        // Return the maximum points achievable after all days (last activity is 3)
        return prev[3];
}
