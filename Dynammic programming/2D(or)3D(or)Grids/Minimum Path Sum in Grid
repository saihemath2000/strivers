//recursion
public static int minSumPath(int[][] grid) {
    	// Write your code here.
        return f(grid.length-1,grid[0].length-1,grid);
    }
    public static int f(int i,int j,int grid[][]){
        if(i==0 && j==0)
           return grid[0][0];
        if(i<0 || j<0)
           return Integer.MAX_VALUE;
        return grid[i][j]+Math.min(f(i-1,j,grid),f(i,j-1,grid));      
}

//Memoization
public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int dp[][]= new int[grid.length][grid[0].length];
        for(int row[]:dp)
          Arrays.fill(row,-1);
        return f(grid.length-1,grid[0].length-1,grid,dp);
}
public static int f(int i,int j,int grid[][],int dp[][]){
        if(i==0 && j==0)
           return grid[0][0];
        if(i<0 || j<0)
           return Integer.MAX_VALUE;
        if(dp[i][j]!=-1)
           return dp[i][j];   
        return dp[i][j]= grid[i][j]+Math.min(f(i-1,j,grid,dp),f(i,j-1,grid,dp));      
}

//Tabulation
public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int n=grid.length,m=grid[0].length;
        int dp[][]= new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0)
                  dp[i][j]=grid[i][j];
                else{
                    int top=(i>0)?dp[i-1][j]:Integer.MAX_VALUE;
                    int left=(j>0)?dp[i][j-1]:Integer.MAX_VALUE;
                    dp[i][j]= grid[i][j]+Math.min(top,left); 
                }  
            }
        }  
        return dp[n-1][m-1];
}

//Optimized Tabulation
public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int n=grid.length,m=grid[0].length;
        int prev[]= new int[m];
        for(int i=0;i<n;i++){
            int curr[]= new int[m];
            for(int j=0;j<m;j++){
                if(i==0 && j==0)
                  curr[j]=grid[i][j];
                else{
                    int top=(i>0)?prev[j]:Integer.MAX_VALUE;
                    int left=(j>0)?curr[j-1]:Integer.MAX_VALUE;
                    curr[j]= grid[i][j]+Math.min(top,left); 
                }  
            }
            prev=curr;
        }  
        return prev[m-1];
}
