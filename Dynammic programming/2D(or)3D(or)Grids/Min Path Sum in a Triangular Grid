//recursion
public static int minimumPathSum(int[][] triangle, int n) {
        // Write your code here.
        return f(triangle,n,0,0);
}
public static int f(int triangle[][],int n,int i,int j){
        if(i==n-1)
          return triangle[i][j];
        int down= f(triangle,n,i+1,j);
        int diag= f(triangle,n,i+1,j+1);
        return triangle[i][j]+Math.min(down,diag);  
}

//memoization
public static int minimumPathSum(int[][] triangle, int n) {
        // Write your code here.
        int dp[][] = new int[n][n];
        for(int row[]:dp)
          Arrays.fill(row,-1);
        return f(triangle,n,0,0,dp);
}
public static int f(int triangle[][],int n,int i,int j,int dp[][]){
        if(i==n-1)
          return triangle[i][j];
        if(dp[i][j]!=-1)
          return dp[i][j];
        int down= f(triangle,n,i+1,j,dp);
        int diag= f(triangle,n,i+1,j+1,dp);
        return dp[i][j]=triangle[i][j]+Math.min(down,diag);  
}

//Tabulation
public static int minimumPathSum(int[][] triangle, int n) {
        // Write your code here.
        int dp[][] = new int[n][n];
        for(int i=0;i<n;i++)
          dp[n-1][i]=triangle[n-1][i];
        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
               int down= dp[i+1][j];
               int diag= dp[i+1][j+1];
               dp[i][j]= triangle[i][j]+Math.min(down,diag);
            }
        }
        return dp[0][0];  
}

//Optimized Tabulation

public static int minimumPathSum(int[][] triangle, int n) {
        // Write your code here.
        int dp[][] = new int[n][n];
        int next[]= new int[n];
        int curr[]= new int[n];
        for(int i=0;i<n;i++)
          next[i]=triangle[n-1][i];
        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
               int down= next[j];
               int diag= next[j+1];
               curr[j]= triangle[i][j]+Math.min(down,diag);
            }
            next=curr.clone();
        }
        return next[0];  
}
