public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here
		int n= denominations.length;	
		long dp[][]= new long[n][value+1];
        for(long row[]:dp)
          Arrays.fill(row,-1);
        long ans= f(denominations,n-1,value,dp);
        return ans;  		
	}
	public static long f(int num[],int index,int target,long dp[][]){
        if(index==0){
            if(target%num[0]==0)
              return 1;
            else 
              return 0;  
        }
        if(dp[index][target]!=-1)
          return dp[index][target];
        long nottake=f(num,index-1,target,dp);
        long take=0;
        if(num[index]<=target)
           take=f(num,index,target-num[index],dp);
        return dp[index][target]=(take+nottake);   
    }

//tabulation
public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here
		int n= denominations.length;	
		long dp[][]= new long[n][value+1];
		for(int i=0;i<=value;i++){
			if(i%denominations[0]==0)
			  dp[0][i]=1;
			else
			  dp[0][i]=0;  
		}
    for(int i=1;i<n;i++){
			for(int j=0;j<=value;j++){
				long nottaken= dp[i-1][j];
				long taken=0;
				if(denominations[i]<=j)
				  taken=dp[i][j-denominations[i]];
				dp[i][j]=taken+nottaken;  
			}
		} 
		return dp[n-1][value];  		
}

//optimized tabulation
public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here
		int n= denominations.length;	
		long dp[][]= new long[n][value+1];
		long prev[]= new long[value+1];
		for(int i=0;i<=value;i++){
			if(i%denominations[0]==0)
			  prev[i]=1;  
		}
    for(int i=1;i<n;i++){
			long curr[]= new long[value+1];
			for(int j=0;j<=value;j++){
				long nottaken= prev[j];
				long taken=0;
				if(denominations[i]<=j)
				  taken=curr[j-denominations[i]];
				curr[j]=taken+nottaken;  
			}
			prev=curr;
		} 
		return prev[value];  		
}
