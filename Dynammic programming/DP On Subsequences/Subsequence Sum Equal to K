//memoization
static boolean subsetSumToK(int n, int k, int[] arr) {
        int dp[][] = new int[n][k + 1];
        for(int row[] :dp)
            Arrays.fill(row, -1);
        
        return f(n-1,k,arr,dp);
}
static boolean f(int ind,int target,int[] arr,int[][] dp){
        if(target == 0)
            return true;
        if(ind == 0)
            return arr[0] == target;
        if(dp[ind][target] != -1)
            return dp[ind][target] == 0 ? false : true;
        boolean notTaken = f(ind-1,target,arr,dp);
        boolean taken = false;
        if(arr[ind]<=target)
            taken = f(ind-1,target-arr[ind],arr,dp);
            
        dp[ind][target] = notTaken || taken ? 1 : 0;
        return notTaken || taken;
}

//Tabulation
static boolean subsetSumToK(int n, int k, int[] arr) {
        boolean dp[][] = new boolean[n][k + 1];
        for(int i=0;i<n;i++)
           dp[i][0]=true;
        if(arr[0]<=k)   
            dp[0][arr[0]]=true;
        for(int i=1;i<n;i++){
          for(int target=1;target<=k;target++){
            boolean nottaken= dp[i-1][target];
            boolean taken = false;
            if(arr[i]<=target)
                taken= dp[i-1][target-arr[i]];
            dp[i][target]=(taken||nottaken); 
          }
        }       
        return dp[n-1][k];
}

//Optimized Tabulation
static boolean subsetSumToK(int n, int k, int[] arr) {
        boolean prev[]= new boolean[k+1];
        prev[0]=true;
        if(arr[0]<=k)   
            prev[arr[0]]=true;
        for(int i=1;i<n;i++){
          boolean curr[]= new boolean[k+1];
          curr[0]=true;  
          for(int target=1;target<=k;target++){
            boolean nottaken= prev[target];
            boolean taken = false;
            if(arr[i]<=target)
                taken= prev[target-arr[i]];
            curr[target]=(taken||nottaken); 
          }
          prev=curr.clone();
        }       
        return prev[k];
}
