//recursion
public static int cutRod(int price[], int n) {
		// Write your code here.
		return f(price,n,n);
}
public static int f(int price[],int index,int target){
		if(index==1){
			return target*price[0];
		}
		int taken=Integer.MIN_VALUE;
		if(index<=target)
		  taken=price[index-1]+f(price,index,target-index);
		int nottaken= f(price,index-1,target);
		return Math.max(taken,nottaken);  
}

//memoization
public static int cutRod(int price[], int n) {
		// Write your code here.
		int dp[][]= new int[n][n+1];
		for(int row[]:dp)
		  Arrays.fill(row,-1);
		return f(price,n,n,dp);
}
public static int f(int price[],int index,int target,int dp[][]){
		if(index==1){
			return target*price[0];
		}
		if(dp[index-1][target]!=-1)
		  return dp[index-1][target];
		int taken=Integer.MIN_VALUE;
		if(index<=target)
		  taken=price[index-1]+f(price,index,target-index,dp);
		int nottaken= f(price,index-1,target,dp);
		return dp[index-1][target]=Math.max(taken,nottaken);  
}

//tabulation
public static int cutRod(int price[], int n) {
		// Write your code here.
		int dp[][]= new int[n][n+1];
		for(int i=0;i<=n;i++)
		  dp[0][i]= i*price[0];
		for(int i=1;i<n;i++){
			for(int j=0;j<=n;j++){
				int taken=Integer.MIN_VALUE;
				if(i+1<=j)
				  taken= price[i]+dp[i][j-(i+1)];
				int nottaken= dp[i-1][j];
				dp[i][j]= Math.max(taken,nottaken);  
			}
		}
		return dp[n-1][n];  
}

//optimized tabulation
public static int cutRod(int price[], int n) {
		// Write your code here.
		int prev[]= new int[n+1];
		for(int i=0;i<=n;i++)
		  prev[i]= i*price[0];
		for(int i=1;i<n;i++){
			for(int j=0;j<=n;j++){
				int taken=Integer.MIN_VALUE;
				if(i+1<=j)
				  taken= price[i]+prev[j-(i+1)];
				int nottaken= prev[j];
				prev[j]= Math.max(taken,nottaken);  
			}
		}
		return prev[n];  
}
