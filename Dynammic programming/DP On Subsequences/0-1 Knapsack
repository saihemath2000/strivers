//Recursion
static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
       return f(weight,value,n-1,maxWeight);
}
public static int f(int weight[],int value[],int n,int Target){
        if(n==0){
            if(weight[n]<=Target)
               return value[n];
            else 
              return 0;   
        }
        int nottake = f(weight,value,n-1,Target);
        int take=Integer.MIN_VALUE;
        if(weight[n]<=Target)
           take= value[n]+f(weight,value,n-1,Target-weight[n]);
        return Math.max(take,nottake);   
}

//Memoization
static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
       int dp[][]= new int[n][maxWeight+1];
       for(int row[]:dp)
         Arrays.fill(row,-1);
       return f(weight,value,n-1,maxWeight,dp);
}
public static int f(int weight[],int value[],int n,int Target,int dp[][]){
        if(n==0){
            if(weight[n]<=Target)
               return value[n];
            else 
              return 0;   
        }
        if(dp[n][Target]!=-1)
          return dp[n][Target];
        int nottake = f(weight,value,n-1,Target,dp);
        int take=Integer.MIN_VALUE;
        if(weight[n]<=Target)
           take= value[n]+f(weight,value,n-1,Target-weight[n],dp);
        return dp[n][Target]=Math.max(take,nottake);   
}

//Tabulation
static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
       int dp[][]= new int[n][maxWeight+1];
       for(int i=weight[0];i<=maxWeight;i++){
            dp[0][i]=value[0];
       }
       for(int i=1;i<n;i++){
           for(int j=0;j<=maxWeight;j++){
               int nottake= dp[i-1][j];
               int take=0;
               if(weight[i]<=j)
                 take=value[i]+dp[i-1][j-weight[i]];
               dp[i][j]=Math.max(nottake,take);  
           }
       }
       return dp[n-1][maxWeight];
}
public static int f(int weight[],int value[],int n,int Target,int dp[][]){
        if(n==0){
            if(weight[n]<=Target)
               return value[n];
            else 
              return 0;   
        }
        if(dp[n][Target]!=-1)
          return dp[n][Target];
        int nottake = f(weight,value,n-1,Target,dp);
        int take=Integer.MIN_VALUE;
        if(weight[n]<=Target)
           take= value[n]+f(weight,value,n-1,Target-weight[n],dp);
        return dp[n][Target]=Math.max(take,nottake);   
}

//Optimized Tabulation
static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
       int prev[]= new int[maxWeight+1];
       for(int i=weight[0];i<=maxWeight;i++){
            prev[i]=value[0];
       }
       for(int i=1;i<n;i++){
           for(int j=maxWeight;j>=0;j--){
               int nottake= prev[j];
               int take=Integer.MIN_VALUE;
               if(weight[i]<=j)
                 take=value[i]+prev[j-weight[i]];
               prev[j]=Math.max(nottake,take);  
           }
       }
       return prev[maxWeight];
}
