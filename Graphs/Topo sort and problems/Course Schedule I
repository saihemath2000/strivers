public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(prerequisites.length==0) return true;
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        int n= prerequisites.length,m= prerequisites[0].length;
        Queue<Integer> q = new ArrayDeque<>();
        int indegree[]= new int[numCourses];
        for(int i=0;i<numCourses;i++)
           adj.add(new ArrayList<Integer>());
        for(int i=0;i<n;i++){
           adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
           indegree[prerequisites[i][0]]++; 
        }
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0) q.add(i);
        }
        while(!q.isEmpty()){
            int u=q.poll();
            for(int v:adj.get(u)){
                indegree[v]--;
                if(indegree[v]==0) q.add(v);
            }
        }
        for(int i=0;i<numCourses;i++){
            if(indegree[i]!=0) return false;
        }
        return true;
    }
