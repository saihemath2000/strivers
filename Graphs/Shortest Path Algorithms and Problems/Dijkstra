class Pair{
    int dst,wt;
    Pair(int a,int b){
        dst=a;
        wt=b;
    }
}
public class Solution {
    public static List<Integer> dijkstra(int[][] edge,int vertices, int edges,int source){
        // Write your code here.
        List<List<Pair>> adj= new ArrayList<>();
        Queue<Pair> q = new PriorityQueue<>((x,y)->x.wt-y.wt);
        q.add(new Pair(source,0));
        for(int i=0;i<vertices;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edge.length;i++){
            adj.get(edge[i][0]).add(new Pair(edge[i][1],edge[i][2]));
            adj.get(edge[i][1]).add(new Pair(edge[i][0],edge[i][2]));
        }
        int dis[]= new int[vertices];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[source]=0;
        while(!q.isEmpty()){
            Pair curr=q.poll();
            for(Pair v:adj.get(curr.dst)){
                if(dis[v.dst]>curr.wt+v.wt){
                    dis[v.dst]=curr.wt+v.wt;
                    q.add(new Pair(v.dst,dis[v.dst]));
                }
            }
        }
        List<Integer> ans= new ArrayList<>();
        for(int i:dis)
          ans.add(i);
        return ans;  
    }
}
