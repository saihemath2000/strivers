static int floydWarshall(int n, int m, int src, int dest, ArrayList<ArrayList<Integer>> edges) {
    // Write your code here.
    int[][] dist = new int[n][n];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        dist[i][j] = Integer.MAX_VALUE;
      }
      dist[i][i] = 0;
    }
    for(ArrayList<Integer> it :edges) {
      int u = it.get(0)-1;
      int v = it.get(1)-1;
      int wt = it.get(2);
      dist[u][v] = wt;
    }
    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
          if (dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE) {
            dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
          }
        }
      }
    }
    return dist[src - 1][dest - 1] == Integer.MAX_VALUE ? 1000000000 : dist[src - 1][dest - 1];
  }
