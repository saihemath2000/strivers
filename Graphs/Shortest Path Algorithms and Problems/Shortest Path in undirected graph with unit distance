public static int[] shortestPath(int n, int [][]edges, int src) {
        // Write your code here.
        int dist[]= new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src]=0;
        ArrayList<ArrayList<Integer>> adj= new ArrayList<>();
        for(int i=0;i<n;i++)
          adj.add(new ArrayList<>());
        for(int i=0;i<edges.length;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        Queue<Integer> q = new ArrayDeque<>();
        q.add(src);
        while(!q.isEmpty()){
            int curr=q.poll();
            for(int i:adj.get(curr)){
                if(dist[i]>dist[curr]+1){
                    dist[i]=dist[curr]+1;
                    q.add(i);
                }
            }
        }
        for(int i=0;i<n;i++){
            if(dist[i]==Integer.MAX_VALUE)
               dist[i]=-1;
        }
        return dist;  
    }
