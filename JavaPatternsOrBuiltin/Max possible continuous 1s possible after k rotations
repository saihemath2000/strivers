import java.util.Collections;
import java.util.TreeSet;

public class Main {
	// function to calculate maximum contiguous ones
	public static int maxContiguousOnes(String s, int k)
	{
		int i, j, a, b, count;

		TreeSet<Integer> m
			= new TreeSet<>(Collections.reverseOrder());

		// this loop calculate all the frequency
		// and stores them in TreeSet
		for (i = 0; i < s.length();) {
			if (s.charAt(i) == '1') {
				count = 0;
				j = i;
				while (j < s.length()
					&& s.charAt(j) == '1') {
					count++;
					j++;
				}
				m.add(count);
				i = j;
			}
			else {
				i++;
			}
		}

		if (m.size() == 0)
			return 0;

		while (k > 0 && m.size() != 1) {
			a = m.first();
			m.remove(a);
			b = m.first();
			m.remove(b);
			m.add(a + b);
			k--;
		}

		return m.first();
	}

	// Driver code
	public static void main(String[] args)
	{
		String s = "10011110011";
		int k = 1;
		System.out.println(maxContiguousOnes(s, k));
	}
} // this code is contributed by devendrasalunke
