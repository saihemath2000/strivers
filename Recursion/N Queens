public static List< List< Integer > > nQueens(int n)
    {
        // Write your code here.
        List<List<Integer>> ans= new ArrayList<>();
        int board[][]= new int[n][n];
        dfs(0,board,n,ans);
        return ans;
    }
    public static void dfs(int col,int board[][],int n,List<List<Integer>> ans){
        if(col==n){
            ans.add(construct(board));
            return;
        }
        for(int row=0;row<n;row++){
            if(validate(col,row,board)){
                board[row][col]=1;
                dfs(col+1,board,n,ans);
                board[row][col]=0;
            }
        }
    }
    static List<Integer> construct(int board[][]){
        List<Integer> temp= new ArrayList<>();
        int n=board.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
                temp.add(board[i][j]);
        }
        return temp;
    }
    static boolean validate(int col,int row,int board[][]){
        int duprow = row;
        int dupcol = col;
        while (row >= 0 && col >= 0) {
            if (board[row][col] ==1) return false;
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0) {
            if (board[row][col] == 1) return false;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0 && row < board.length) {
            if (board[row][col] ==1) return false;
            col--;
            row++;
        }
        return true;
    }
